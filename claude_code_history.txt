{"session_id":"cd0a050e-feb4-4373-b305-4abaf4c69221","transcript_path":"/home/coding/.claude/projects/-home-coding-code-smith/cd0a050e-feb4-4373-b305-4abaf4c69221.jsonl","cwd":"/home/coding/code-smith/code-generation/intent/ast-analysis/oopstracker","hook_event_name":"PreToolUse","tool_name":"Write","tool_input":{"file_path":"/home/coding/code-smith/code-generation/intent/ast-analysis/oopstracker/test_cleanup.py","content":"#!/usr/bin/env python3\n\"\"\"Test cleanup functionality.\"\"\"\n\nimport asyncio\nimport sys\nsys.path.insert(0, '/home/coding/code-smith/code-generation/intent/ast-analysis/oopstracker/.venv/lib/python3.12/site-packages')\n\nasync def test_cleanup():\n    from intent_unified import IntentUnifiedFacade\n    \n    print(\"Creating facade...\")\n    facade = IntentUnifiedFacade()\n    \n    print(\"Initializing...\")\n    await facade.__aenter__()\n    \n    print(\"Using semantic analyzer...\")\n    analyzer = facade.semantic_analyzer\n    \n    # Simple analysis\n    from intent_unified.core.types import CodeFragment\n    code1 = CodeFragment(\"def add(a, b): return a + b\", \"python\")\n    code2 = CodeFragment(\"def sum_two(x, y): return x + y\", \"python\")\n    \n    result = await analyzer.analyze_similarity(code1, code2)\n    print(f\"Analysis result: {result.similarity_score}\")\n    \n    print(\"Cleaning up...\")\n    await facade.__aexit__(None, None, None)\n    \n    print(\"Waiting for any pending tasks...\")\n    await asyncio.sleep(1)\n    \n    print(\"Done!\")\n\nif __name__ == \"__main__\":\n    asyncio.run(test_cleanup())"}}